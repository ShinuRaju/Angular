In Angular, **template reference variables** (often called "template refs" or "local references") are a way to reference DOM elements, Angular components, directives, or even `<ng-template>` elements directly within a template. These references allow you to interact with the element/component programmatically from the template or the component class.

---

### **Declaration of Template Reference Variables**
- Use the `#` symbol (or `ref-` syntax) to declare a template reference variable.  
  Example:  
  ```html
  <input #myInput>          <!-- Reference to the DOM element -->
  <app-child #childComp></app-child>  <!-- Reference to the child component -->
  <ng-template #myTemplate></ng-template> <!-- Reference to an ng-template -->
  ```

---

### **Types of Template References**
Template reference variables can refer to different types of entities, and their **TypeScript types** depend on what they point to:

| **Reference Type**                | **Example**                          | **Type in TypeScript**                     | **Use Case**                                                                 |
|-----------------------------------|--------------------------------------|--------------------------------------------|-----------------------------------------------------------------------------|
| **DOM Element**                   | `<input #myInput>`                  | `HTMLInputElement` (native DOM element)    | Access DOM properties (e.g., `value`, `focus()`).                           |
| **Angular Component**             | `<app-child #childComp></app-child>`| `ChildComponent` (component instance)      | Call methods or access properties of the child component.                   |
| **Directive**                     | `<div #dirRef myDirective></div>`   | `MyDirective` (directive instance)         | Interact with directive-specific logic.                                     |
| **TemplateRef**                   | `<ng-template #myTemplate>`         | `TemplateRef<any>`                         | Use with structural directives (e.g., `*ngIf`, `*ngFor`) or `ViewContainerRef`. |
| **ElementRef** (generic wrapper)  | `<div #myDiv></div>`                | `ElementRef<HTMLElement>`                  | Access the underlying native element via `myDiv.nativeElement`.             |

---

### **Using Template References**
#### 1. **In the Template**
Directly access properties or methods in the template:  
```html
<input #myInput placeholder="Type something">
<button (click)="myInput.focus()">Focus Input</button> <!-- Calls DOM method -->
```

#### 2. **In the Component Class**
Use `@ViewChild` or `@ViewChildren` decorators to access the reference programmatically:  
```typescript
import { ViewChild, ElementRef } from '@angular/core';

export class AppComponent {
  @ViewChild('myInput') myInputRef!: ElementRef<HTMLInputElement>;

  ngAfterViewInit() {
    this.myInputRef.nativeElement.focus(); // Access the DOM element
  }
}
```

---

### **Type-Specific Examples**
#### **1. DOM Element Reference**
```html
<input #emailInput type="email">
```
```typescript
@ViewChild('emailInput') emailInputRef!: ElementRef<HTMLInputElement>;
// Type: ElementRef<HTMLInputElement>
```

#### **2. Component Reference**
```html
<app-user-profile #profile></app-user-profile>
```
```typescript
@ViewChild('profile') profileRef!: UserProfileComponent;
// Type: UserProfileComponent (the component class)
```

#### **3. Directive Reference**
```html
<div #tooltip="myTooltip" myTooltipDirective></div>
```
```typescript
@ViewChild('tooltip') tooltipRef!: MyTooltipDirective;
// Type: MyTooltipDirective (the directive class)
```

#### **4. TemplateRef (for ng-template)**
```html
<ng-template #myTemplate>
  <p>This is a template!</p>
</ng-template>
```
```typescript
@ViewChild('myTemplate') myTemplateRef!: TemplateRef<any>;
// Type: TemplateRef<any>
```

---

### **Key Use Cases**
1. **DOM Manipulation**: Access native DOM properties/methods (e.g., `focus()`, `value`).  
2. **Component Interaction**: Call methods or read data from child components.  
3. **Directive Interaction**: Access directive instances for custom logic.  
4. **Dynamic Templates**: Use `TemplateRef` with `ViewContainerRef` to render content dynamically.  

---

### **Summary**
- **Template reference variables** (`#var`) let you reference elements/components/directives in templates.  
- **Types** depend on what they point to:  
  - DOM elements: `ElementRef<T>` or native types like `HTMLInputElement`.  
  - Components: The component class (e.g., `UserProfileComponent`).  
  - Directives: The directive class (e.g., `MyTooltipDirective`).  
  - `<ng-template>`: `TemplateRef<any>`.  
- Use `@ViewChild`/`@ViewChildren` to access references in the component class with proper TypeScript types for type safety.
