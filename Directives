In Angular, **directives** are classes that add behavior or modify the DOM structure. There are **three main types of directives**, each serving a distinct purpose:

---

### 1. **Components**  
A component is a **directive with a template**. It’s the most common type of directive and is used to create reusable UI elements.  
- **Purpose**: Define custom HTML elements with their own templates and logic.  
- **Example**:  
  ```typescript
  @Component({
    selector: 'app-header',
    template: '<h1>Welcome to {{ appName }}</h1>',
  })
  export class HeaderComponent {
    appName = 'My App';
  }
  ```
- **Key Feature**: Combines a template with logic and styling.

---

### 2. **Attribute Directives**  
Modify the **appearance or behavior** of an existing DOM element (e.g., styling, event handling).  
- **Purpose**: Change properties, styles, or listen to events on elements.  
- **Built-in Examples**:  
  - `NgStyle`: Dynamically set CSS styles.  
    ```html
    <div [ngStyle]="{ 'color': textColor, 'font-size.px': fontSize }"></div>
    ```
  - `NgClass`: Add/remove CSS classes conditionally.  
    ```html
    <div [ngClass]="{ 'active': isActive, 'error': hasError }"></div>
    ```
- **Custom Example**: Highlight an element on hover.  
  ```typescript
  @Directive({
    selector: '[appHighlight]'
  })
  export class HighlightDirective {
    @HostListener('mouseenter') onMouseEnter() {
      this.el.nativeElement.style.backgroundColor = 'yellow';
    }
    constructor(private el: ElementRef) {}
  }
  ```
  **Usage**:  
  ```html
  <p appHighlight>Hover over me!</p>
  ```

---

### 3. **Structural Directives**  
Change the **DOM layout** by adding, removing, or manipulating elements.  
- **Purpose**: Conditionally render or repeat elements.  
- **Built-in Examples**:  
  - `*ngIf`: Conditionally include/exclude elements.  
    ```html
    <div *ngIf="isLoggedIn">Welcome, {{ username }}!</div>
    ```
  - `*ngFor`: Repeat elements for each item in a list.  
    ```html
    <li *ngFor="let item of items; index as i">{{ i + 1 }}. {{ item }}</li>
    ```
  - `*ngSwitch`: Switch between multiple views.  
    ```html
    <div [ngSwitch]="role">
      <p *ngSwitchCase="'admin'">Admin Dashboard</p>
      <p *ngSwitchCase="'user'">User Profile</p>
      <p *ngSwitchDefault>Guest View</p>
    </div>
    ```
- **Custom Example**: Create a custom `*appUnless` directive (opposite of `*ngIf`).  
  ```typescript
  @Directive({
    selector: '[appUnless]'
  })
  export class UnlessDirective {
    @Input() set appUnless(condition: boolean) {
      if (!condition) {
        this.viewContainer.createEmbeddedView(this.templateRef);
      } else {
        this.viewContainer.clear();
      }
    }
    constructor(
      private templateRef: TemplateRef<any>,
      private viewContainer: ViewContainerRef
    ) {}
  }
  ```
  **Usage**:  
  ```html
  <div *appUnless="isHidden">Show this if isHidden is false.</div>
  ```

---

### Key Differences Between Directive Types

| Type                | Syntax          | DOM Impact             | Example Use Cases                     |
|---------------------|-----------------|------------------------|---------------------------------------|
| **Component**       | `<app-header>`  | Creates new DOM nodes  | Reusable UI widgets (buttons, cards). |
| **Attribute**       | `[appHighlight]`| Modifies existing DOM  | Styling, event listeners, tooltips.   |
| **Structural**      | `*ngIf`         | Alters DOM structure   | Conditional rendering, loops.         |

---

### How to Choose a Directive Type?
- Use a **component** when you need a reusable UI block with its own template.
- Use an **attribute directive** to modify an element’s behavior/appearance.
- Use a **structural directive** to dynamically add/remove DOM elements.

---

### Best Practices
- **Avoid DOM manipulation in components**—use directives instead.
- **Prefix custom directives** (e.g., `appHighlight`) to avoid naming conflicts.
- **Use `Renderer2`** (not direct DOM access) for cross-platform compatibility.

By mastering these directive types, you can create dynamic, maintainable Angular applications! 🚀



Here are the **most common custom directives** Angular developers create to solve recurring problems, enhance reusability, and streamline UI behavior:

---

### **1. Permission/Role-Based Directives**
**Purpose**: Show/hide elements based on user roles or permissions.  
**Example**:  
```typescript
@Directive({ selector: '[appHasRole]' })
export class HasRoleDirective {
  @Input() appHasRole!: string;

  constructor(
    private templateRef: TemplateRef<any>,
    private viewContainer: ViewContainerRef,
    private authService: AuthService
  ) {}

  ngOnInit() {
    if (this.authService.hasRole(this.appHasRole)) {
      this.viewContainer.createEmbeddedView(this.templateRef);
    } else {
      this.viewContainer.clear();
    }
  }
}
```
**Usage**:  
```html
<div *appHasRole="'admin'">Admin Dashboard</div>
```

---

### **2. Auto-Focus Directive**
**Purpose**: Automatically focus an input field on page load.  
**Example**:  
```typescript
@Directive({ selector: '[appAutoFocus]' })
export class AutoFocusDirective implements AfterViewInit {
  constructor(private el: ElementRef) {}

  ngAfterViewInit() {
    this.el.nativeElement.focus();
  }
}
```
**Usage**:  
```html
<input appAutoFocus placeholder="Start typing...">
```

---

### **3. Tooltip/Popover Directive**
**Purpose**: Show a tooltip on hover or click.  
**Example**:  
```typescript
@Directive({ selector: '[appTooltip]' })
export class TooltipDirective {
  @Input() appTooltip!: string;
  private tooltipElement!: HTMLElement;

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  @HostListener('mouseenter') onMouseEnter() {
    this.tooltipElement = this.renderer.createElement('div');
    this.renderer.appendChild(
      this.tooltipElement,
      this.renderer.createText(this.appTooltip)
    );
    this.renderer.addClass(this.tooltipElement, 'tooltip');
    this.renderer.appendChild(document.body, this.tooltipElement);
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.renderer.removeChild(document.body, this.tooltipElement);
  }
}
```
**Usage**:  
```html
<button [appTooltip]="'Save changes'">Save</button>
```

---

### **4. Debounce Click Directive**
**Purpose**: Prevent double-clicks or rapid form submissions.  
**Example**:  
```typescript
@Directive({ selector: '[appDebounceClick]' })
export class DebounceClickDirective {
  @Input() debounceTime = 500;
  @Output() debounceClick = new EventEmitter();

  private clicks = new Subject();

  constructor() {
    this.clicks.pipe(
      debounceTime(this.debounceTime)
    ).subscribe(e => this.debounceClick.emit(e));
  }

  @HostListener('click', ['$event']) onClick(e: Event) {
    e.preventDefault();
    this.clicks.next(e);
  }
}
```
**Usage**:  
```html
<button (debounceClick)="save()" [debounceTime]="1000">Save</button>
```

---

### **5. Input Mask Directive**
**Purpose**: Format input values (e.g., phone numbers, dates).  
**Example**:  
```typescript
@Directive({ selector: '[appPhoneMask]' })
export class PhoneMaskDirective {
  @HostListener('input', ['$event']) onInput(event: Event) {
    const input = event.target as HTMLInputElement;
    const value = input.value.replace(/\D/g, '');
    input.value = value.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
  }
}
```
**Usage**:  
```html
<input appPhoneMask placeholder="(123) 456-7890">
```

---

### **6. Lazy-Load Image Directive**
**Purpose**: Load images only when they enter the viewport.  
**Example**:  
```typescript
@Directive({ selector: '[appLazyLoad]' })
export class LazyLoadDirective implements OnInit {
  @Input() appLazyLoad!: string;

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  ngOnInit() {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          this.renderer.setAttribute(
            this.el.nativeElement,
            'src',
            this.appLazyLoad
          );
          observer.unobserve(this.el.nativeElement);
        }
      });
    });

    observer.observe(this.el.nativeElement);
  }
}
```
**Usage**:  
```html
<img appLazyLoad="image.jpg" alt="Lazy-loaded image">
```

---

### **7. Copy-to-Clipboard Directive**
**Purpose**: Copy text to the clipboard on click.  
**Example**:  
```typescript
@Directive({ selector: '[appCopy]' })
export class CopyDirective {
  @Input() appCopy!: string;

  @HostListener('click') onClick() {
    navigator.clipboard.writeText(this.appCopy);
  }
}
```
**Usage**:  
```html
<button [appCopy]="'Text to copy'">Copy</button>
```

---

### **8. Ripple Effect Directive**
**Purpose**: Add a material-design ripple effect to buttons.  
**Example**:  
```typescript
@Directive({ selector: '[appRipple]' })
export class RippleDirective implements OnDestroy {
  private rippleContainer!: HTMLElement;

  constructor(private el: ElementRef, private renderer: Renderer2) {
    this.setupRipple();
  }

  private setupRipple() {
    // Logic to create and animate ripple effect
  }

  ngOnDestroy() {
    this.rippleContainer.remove();
  }
}
```
**Usage**:  
```html
<button appRipple>Click Me</button>
```

---

### **Why These Directives Are Popular**
1. **Reusability**: Encapsulate cross-cutting concerns (e.g., auth, UI effects).  
2. **Separation of Concerns**: Keep components focused on business logic.  
3. **Performance**: Optimize DOM interactions (e.g., lazy loading).  
4. **Consistency**: Enforce UI/UX patterns across the app.  

---

### **Best Practices**
- **Use `Renderer2`**: Avoid direct DOM manipulation for security and cross-platform compatibility.  
- **Unsubscribe Observables**: Clean up subscriptions in directives to prevent memory leaks.  
- **Prefix Directives**: Use a prefix (e.g., `app`) to avoid naming conflicts.  
- **Test Directives**: Verify DOM interactions with Angular testing utilities.

By creating these custom directives, developers build cleaner, more maintainable Angular apps! 🛠️

